// Package docs Code generated by swaggo/swag. DO NOT EDIT
//
//coverage:ignore file
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bundles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of bundles based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bundles"
                ],
                "summary": "Get a list of bundles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bundle ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of bundles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ProductBundle"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all bundles.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new bundle based on the provided JSON request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bundles"
                ],
                "summary": "Create a new bundle",
                "parameters": [
                    {
                        "description": "Bundle details",
                        "name": "bundle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ProductBundle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Bundle created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to commit the transaction.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bundles/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of bundles based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bundles"
                ],
                "summary": "Get a list of bundles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bundle ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of bundles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ProductBundle"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all bundles.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new bundle based on the provided JSON request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bundles"
                ],
                "summary": "Create a new bundle",
                "parameters": [
                    {
                        "description": "Bundle details",
                        "name": "bundle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ProductBundle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Bundle created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to commit the transaction.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login/": {
            "post": {
                "description": "Authenticates the user and creates a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/loginHandler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create session",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout/": {
            "post": {
                "description": "Logs out the user by invalidating the session and CSRF tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logout"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Request method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not log out",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of products based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a list of products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Publicly Available Product",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields to retrieve",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Product"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all products.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new product to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "New product information",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsHandler.ProductPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully"
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Researcher cannot create public products",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Product already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create product.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates fields of an existing product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Product update fields",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsHandler.ProductPATCHRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Detected a conflict for the current product, please refresh.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not update product.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new product to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "New product information",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productsHandler.ProductPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully"
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Researcher cannot create public products",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Product already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create product.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/{products_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of products based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a list of products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Publicly Available Product",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fields to retrieve",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Product"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all products.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rankings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of rankings based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Get a list of rankings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public rankings",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Test ID",
                        "name": "test_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Rank",
                        "name": "rank",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of rankings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.TestRank"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid rank parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all rankings",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new ranking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Create a new ranking",
                "parameters": [
                    {
                        "description": "New ranking information",
                        "name": "ranking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rankingsHandler.RankingsPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ranking created successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Product is already part of the test",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create ranking",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rankings/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new ranking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Create a new ranking",
                "parameters": [
                    {
                        "description": "New ranking information",
                        "name": "ranking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rankingsHandler.RankingsPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ranking created successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Product is already part of the test",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create ranking",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rankings/{rank_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of rankings based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Get a list of rankings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public rankings",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Test ID",
                        "name": "test_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Rank",
                        "name": "rank",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of rankings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.TestRank"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid rank parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all rankings",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register/": {
            "post": {
                "description": "Registers a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registrationHandler.RegistrationPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of tests based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Get a list of tests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "All Public Tests",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date in YYYY-MM-DD format",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of tests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Test"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid start date format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all tests.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new test to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Create a new test",
                "parameters": [
                    {
                        "description": "New test information",
                        "name": "test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/testsHandler.TestPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Test created successfully"
                    },
                    "500": {
                        "description": "Could not create test.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tests/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of tests based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Get a list of tests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "All Public Tests",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date in YYYY-MM-DD format",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of tests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Test"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid start date format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve all tests.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new test to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Create a new test",
                "parameters": [
                    {
                        "description": "New test information",
                        "name": "test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/testsHandler.TestPOSTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Test created successfully"
                    },
                    "500": {
                        "description": "Could not create test.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing test in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Update an existing test's information, ranks, ac, tc and/or sc.",
                "parameters": [
                    {
                        "description": "Test updates",
                        "name": "test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/testsHandler.TestPATCHRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid patch request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Detected a conflict for the current test, please refresh.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not JSON encode the response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tests/{test_id}/products/{product_id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing test in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tests"
                ],
                "summary": "Update an existing test's information, ranks, ac, tc and/or sc.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Test ID",
                        "name": "test_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test updates",
                        "name": "test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/testsHandler.TestPATCHRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid patch request.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Detected a conflict for the current test, please refresh.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not JSON encode the response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user profile for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserProfile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "Successful response with user profile details",
                        "schema": {
                            "$ref": "#/definitions/userProfileHandler.UserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create user profile struct.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the password of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user's password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usersHandler.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "New password cannot be the same as the current password.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to commit the transaction.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user for a specific user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of active sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Session"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request URL, no user_id found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create users struct.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an active session of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user's active session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Session deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request URL, no user_id or session_id found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to commit the transaction.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the user for a specific user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with a list of active sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Session"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request URL, no user_id found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create users struct.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/sessions/{sessionId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an active session of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user's active session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Session deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request URL, no user_id or session_id found.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to commit the transaction.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Product": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "ean_code": {
                    "type": "string"
                },
                "high_temperature": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_public": {
                    "type": "boolean"
                },
                "low_temperature": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "testing_team": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "domain.ProductBundle": {
            "type": "object",
            "properties": {
                "bundle_id": {
                    "type": "integer"
                },
                "layer_no": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                }
            }
        },
        "domain.Session": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "session_token": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "domain.Test": {
            "type": "object",
            "properties": {
                "ac_id": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_public": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "sc_id": {
                    "type": "integer"
                },
                "tc_id": {
                    "type": "integer"
                },
                "test_date": {
                    "type": "string"
                },
                "testing_team": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "domain.TestRank": {
            "type": "object",
            "properties": {
                "distance_behind": {
                    "type": "integer"
                },
                "is_public": {
                    "type": "boolean"
                },
                "product_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "test_id": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "loginHandler.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                }
            }
        },
        "productsHandler.ProductPATCHRequest": {
            "type": "object",
            "required": [
                "updates"
            ],
            "properties": {
                "updates": {
                    "type": "object",
                    "additionalProperties": true
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "productsHandler.ProductPOSTRequest": {
            "type": "object",
            "required": [
                "comment",
                "high_temperature",
                "low_temperature",
                "name",
                "status",
                "type"
            ],
            "properties": {
                "brand": {
                    "description": "Brand: Only ASCII, can be blank, max 64 characters",
                    "type": "string",
                    "maxLength": 64
                },
                "comment": {
                    "description": "Comment: max 2040 bytes.",
                    "type": "string",
                    "maxLength": 2040
                },
                "ean_code": {
                    "description": "EANCode: Only ASCII, can be blank, max 64 characters,\nOnly capital letters, numbers, and '#' are allowed; non-blank, max 128 characters.",
                    "type": "string",
                    "maxLength": 128
                },
                "high_temperature": {
                    "description": "HighTemperature must be between -100 and 100.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": -100
                },
                "image_url": {
                    "description": "ImageURL: Only ASCII, can be blank, and must be a valid URL.",
                    "type": "string"
                },
                "is_public": {
                    "description": "Gets set to false by default and validated in POST handler.",
                    "type": "boolean"
                },
                "low_temperature": {
                    "description": "LowTemperature must be between -100 and 100.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": -100
                },
                "name": {
                    "description": "Name: Only ASCII, non-blank, max 64 characters.",
                    "type": "string",
                    "maxLength": 64
                },
                "status": {
                    "description": "Status: Only one of the following: active, tested, discontinued, development, retired.",
                    "type": "string",
                    "enum": [
                        "active",
                        "tested",
                        "discontinued",
                        "development",
                        "retired"
                    ]
                },
                "testing_team": {
                    "type": "integer"
                },
                "type": {
                    "description": "Type: Only ASCII, non-blank, max 16 characters.",
                    "type": "string",
                    "enum": [
                        "liquid",
                        "solid",
                        "spray",
                        "powder",
                        "gel",
                        "bundle"
                    ]
                }
            }
        },
        "rankingsHandler.RankingsPOSTRequest": {
            "type": "object",
            "required": [
                "rank",
                "test_id",
                "wins"
            ],
            "properties": {
                "is_public": {
                    "type": "boolean"
                },
                "rank": {
                    "type": "integer"
                },
                "test_id": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "registrationHandler.RegistrationPOSTRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "team_name",
                "team_role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 14
                },
                "team_name": {
                    "type": "string"
                },
                "team_role": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "testsHandler.AirConditionsPOST": {
            "type": "object",
            "properties": {
                "cloud": {
                    "type": "string",
                    "enum": [
                        "1",
                        "2",
                        "3",
                        "4"
                    ]
                },
                "humidity": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0
                },
                "temperature": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": -100
                },
                "wind": {
                    "type": "string",
                    "enum": [
                        "S",
                        "L",
                        "M",
                        "ST"
                    ]
                }
            }
        },
        "testsHandler.SnowConditionsPOST": {
            "type": "object",
            "properties": {
                "snow_humidity": {
                    "type": "string",
                    "enum": [
                        "DS",
                        "W1",
                        "W2",
                        "W3",
                        "W4"
                    ]
                },
                "snow_type": {
                    "type": "string",
                    "enum": [
                        "A1",
                        "A2",
                        "A3",
                        "A4",
                        "A5",
                        "FS",
                        "NS",
                        "IN",
                        "IT",
                        "TR"
                    ]
                },
                "temperature": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": -100
                }
            }
        },
        "testsHandler.TestPATCHRequest": {
            "type": "object",
            "required": [
                "updates"
            ],
            "properties": {
                "updates": {
                    "type": "object",
                    "additionalProperties": true
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "testsHandler.TestPOSTRequest": {
            "type": "object",
            "required": [
                "ac",
                "comment",
                "location",
                "sc",
                "tc",
                "test_ranks"
            ],
            "properties": {
                "ac": {
                    "$ref": "#/definitions/testsHandler.AirConditionsPOST"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 2040
                },
                "is_public": {
                    "type": "boolean",
                    "enum": [
                        true,
                        false
                    ]
                },
                "location": {
                    "type": "string",
                    "maxLength": 256
                },
                "sc": {
                    "$ref": "#/definitions/testsHandler.SnowConditionsPOST"
                },
                "tc": {
                    "$ref": "#/definitions/testsHandler.TrackConditionsPOST"
                },
                "test_date": {
                    "description": "TODO: Need validation for date format",
                    "type": "string"
                },
                "test_ranks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/testsHandler.TestRanksPOST"
                    }
                },
                "testing_team": {
                    "type": "integer"
                }
            }
        },
        "testsHandler.TestRanksPOST": {
            "type": "object",
            "properties": {
                "distance_behind": {
                    "type": "integer",
                    "minimum": 0
                },
                "is_rank_public": {
                    "type": "boolean",
                    "enum": [
                        true,
                        false
                    ]
                },
                "product_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "rank": {
                    "type": "integer"
                }
            }
        },
        "testsHandler.TrackConditionsPOST": {
            "type": "object",
            "properties": {
                "track_hardness": {
                    "type": "string",
                    "enum": [
                        "H1",
                        "H2",
                        "H3",
                        "H4",
                        "H5",
                        "H6"
                    ]
                },
                "track_type": {
                    "type": "string",
                    "enum": [
                        "T1",
                        "T2",
                        "D1",
                        "D2"
                    ]
                }
            }
        },
        "userProfileHandler.TeamResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "team_role": {
                    "type": "string"
                }
            }
        },
        "userProfileHandler.UserProfileResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "team": {
                    "$ref": "#/definitions/userProfileHandler.TeamResponse"
                },
                "user_role": {
                    "type": "string"
                }
            }
        },
        "usersHandler.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "minLength": 8
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "usersHandler.UserInfoResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "team_name": {
                    "type": "string"
                },
                "user_role": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
